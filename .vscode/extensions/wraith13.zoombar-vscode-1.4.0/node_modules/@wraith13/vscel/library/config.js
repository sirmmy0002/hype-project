"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeRoot = exports.Root = exports.stringArrayValidator = exports.makeEnumValidator = exports.MapEntry = exports.Entry = void 0;
const vscode = require("vscode");
const cache_1 = require("./cache");
const sectionKeyRegExp = /^(.+)\.([^.]+)$/;
;
class Entry {
    constructor(properties, key, validator) {
        this.properties = properties;
        this.key = key;
        this.validator = validator;
        this.regulate = (rawKey, value) => {
            let result = value;
            if (this.validator && !this.validator(result)) {
                // settings.json をテキストとして直接編集してる時はともかく GUI での編集時に無駄にエラー表示が行われてしまうので、エンドユーザーに対するエラー表示は行わない。
                //vscode.window.showErrorMessage(`${rawKey} setting value is invalid! Please check your settings.`);
                console.error(`"${rawKey}" setting value(${JSON.stringify(value)}) is invalid! Please check your settings.`);
                result = this.defaultValue;
            }
            else {
                if (undefined !== this.minValue && result < this.minValue) {
                    result = this.minValue;
                }
                else if (undefined !== this.maxValue && this.maxValue < result) {
                    result = this.maxValue;
                }
            }
            return result;
        };
        this.cache = new cache_1.Cache((languageId) => {
            let result;
            if (undefined === languageId || null === languageId || 0 === languageId.length) {
                const key = this.key.replace(sectionKeyRegExp, "$1");
                const name = this.key.replace(sectionKeyRegExp, "$2");
                result = vscode.workspace.getConfiguration(key)[name];
                if (undefined === result) {
                    result = this.defaultValue;
                }
                else {
                    result = this.regulate(this.key, result);
                }
            }
            else {
                const langSection = vscode.workspace.getConfiguration(`[${languageId}]`, null);
                result = langSection[this.key];
                if (undefined === result) {
                    result = this.get("");
                }
                else {
                    result = this.regulate(`[${languageId}].${this.key}`, result);
                }
            }
            return result;
        });
        this.inspectCache = new cache_1.Cache((languageId) => {
            let result;
            if (undefined === languageId || null === languageId || 0 === languageId.length) {
                const key = this.key.replace(sectionKeyRegExp, "$1");
                const name = this.key.replace(sectionKeyRegExp, "$2");
                result = vscode.workspace.getConfiguration(key).inspect(name);
            }
            else {
                const langSection = vscode.workspace.getConfiguration(`[${languageId}]`, null);
                result = langSection.inspect(this.key);
            }
            return result;
        });
        this.get = this.cache.get;
        this.getCache = this.cache.getCache;
        this.inspect = this.inspectCache.get;
        this.getInspectCache = this.inspectCache.getCache;
        this.clear = () => {
            this.cache.clear();
            this.inspectCache.clear();
        };
        this.defaultValue = properties[key].default;
        this.minValue = properties[key].minimum;
        this.maxValue = properties[key].maximum;
    }
}
exports.Entry = Entry;
class MapEntry {
    constructor(properties, key, mapObject) {
        this.properties = properties;
        this.key = key;
        this.mapObject = mapObject;
        this.config = new Entry(this.properties, this.key, exports.makeEnumValidator(this.mapObject));
        this.get = (languageId) => this.mapObject[this.config.cache.get(languageId)];
        this.getCache = (languageId) => this.mapObject[this.config.cache.getCache(languageId)];
        this.inspect = this.config.inspectCache.get;
        this.getInspectCache = this.config.inspectCache.getCache;
        this.clear = this.config.clear;
    }
}
exports.MapEntry = MapEntry;
exports.makeEnumValidator = (mapObject) => (value) => 0 <= Object.keys(mapObject).indexOf(value.toString());
exports.stringArrayValidator = (value) => "[object Array]" === Object.prototype.toString.call(value) && value.map(i => "string" === typeof i).reduce((a, b) => a && b, true);
class Root {
    constructor(properties) {
        this.properties = properties;
        this.makeEntry = (key, validator) => this.register(new Entry(this.properties, key, validator));
        this.makeMapEntry = (key, mapObject) => this.register(new MapEntry(this.properties, key, mapObject));
        this.entries = [];
        this.register = (entry) => {
            this.entries.push(entry);
            return entry;
        };
    }
}
exports.Root = Root;
exports.makeRoot = (packageJson) => new Root(packageJson.contributes.configuration[0].properties);
//# sourceMappingURL=config.js.map